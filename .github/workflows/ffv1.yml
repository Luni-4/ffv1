name: ffv1

on: [push, pull_request]

jobs:
  code-coverage:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
          RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'

      - uses: actions-rs/cargo@v1
        with:
          command: run
          args: --package ffv1-decoder -- -i data/ffv1_v3.mkv -o /dev/null
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
          RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'

      - id: coverage
        uses: actions-rs/grcov@v0.1

      - name: Coveralls upload
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ steps.coverage.outputs.report }}

  rustfmt-clippy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install stable
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: clippy, rustfmt

    - name: Run rustfmt
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: -- --check

    - name: Run clippy
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: -- -D warnings --verbose

#  cargo-publish:
#    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v2
#    - name: Run cargo publish for ffv1
#      continue-on-error: true
#      run: |
#        FFV1_TMP=$(mktemp /tmp/ffv1XXX.txt) || echo "::error::mktemp error"
#        echo "::set-env name=FFV1_TMP::$FFV1_TMP"
#        cargo publish --token ${{ secrets.CRATESIO_TOKEN }} 2> $FFV1_TMP
#    - name: Check if ffv1 is already published
#      run: |
#        empty=0
#        grep -q '[^[:space:]]' < $FFV1_TMP || empty=1
#        [ $empty -eq 0 ] && cat $FFV1_TMP
#        [ $empty -eq 1 ] || grep -q "is already uploaded" < $FFV1_TMP


  compare-rust-ffmpeg:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install ffmpeg

    - name: Install Rust stable
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Build example
      run: |
        cargo build --release --examples

    - name: Run example
      run: |
        cargo run --release --package ffv1-decoder -- -i data/ffv1_v3.mkv \
                                                      -o data/ffv1-rust.raw
    - name: Run ffmpeg
      working-directory: data
      run: |
        ffmpeg -i ffv1_v3.mkv -f rawvideo ffv1-ffmpeg.raw

    - name: Compare Rust and FFmpeg raw files
      working-directory: data
      run: |
        cmp -l ffv1-rust.raw ffv1-ffmpeg.raw

  build:

    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
    - uses: actions/checkout@v2

    - name: Install stable
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Build
      run: |
        cargo build --workspace
